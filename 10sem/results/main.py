# -*- coding: utf-8 -*-
"""лаба10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1suWq9CIkfa63mcfRVx-rlemgpGsc6lqs
"""

!pip install librosa matplotlib numpy scipy

import librosa
import librosa.display
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import find_peaks

# Функция для загрузки аудиофайла и расчета спектрограммы
def plot_spectrogram(audio_path, title):
    y, sr = librosa.load(audio_path)
    D = np.abs(librosa.stft(y))**2
    S = librosa.feature.melspectrogram(S=D, sr=sr)
    log_S = librosa.power_to_db(S, ref=np.max)

    plt.figure(figsize=(12, 8))
    librosa.display.specshow(log_S, sr=sr, x_axis='time', y_axis='log')
    plt.colorbar(format='%+02.0f dB')
    plt.title(title)
    plt.show()

    return y, sr, log_S

y_a, sr_a, log_S_a = plot_spectrogram('a.wav', 'Spectrogram of "A" Sound')
y_i, sr_i, log_S_i = plot_spectrogram('i.wav', 'Spectrogram of "I" Sound')
y_animal, sr_animal, log_S_animal = plot_spectrogram('miau.wav', 'Spectrogram of miau')

# Поиск минимальной и максимальной частоты голоса
def find_min_max_freq(y, sr):
    D = np.abs(librosa.stft(y))
    freqs = librosa.fft_frequencies(sr=sr)
    magnitude = np.mean(D, axis=1)
    min_freq = freqs[np.where(magnitude > np.mean(magnitude) * 0.1)[0][0]]
    max_freq = freqs[np.where(magnitude > np.mean(magnitude) * 0.1)[0][-1]]
    return min_freq, max_freq

min_freq_a, max_freq_a = find_min_max_freq(y_a, sr_a)
min_freq_i, max_freq_i = find_min_max_freq(y_i, sr_i)
min_freq_animal, max_freq_animal = find_min_max_freq(y_animal, sr_animal)

print(f'Min frequency "A": {min_freq_a:.2f} Hz, Max frequency "A": {max_freq_a:.2f} Hz')
print(f'Min frequency "I": {min_freq_i:.2f} Hz, Max frequency "I": {max_freq_i:.2f} Hz')
print(f'Min frequency "Miau": {min_freq_animal:.2f} Hz, Max frequency "Miau": {max_freq_animal:.2f} Hz')

# Определение наиболее тембрально окрашенного основного тона
def find_fundamental_tone(y, sr):
    pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
    max_magnitude_index = magnitudes.argmax()
    fundamental_freq = pitches[max_magnitude_index // magnitudes.shape[1], max_magnitude_index % magnitudes.shape[1]]
    return fundamental_freq

fundamental_a = find_fundamental_tone(y_a, sr_a)
fundamental_i = find_fundamental_tone(y_i, sr_i)
fundamental_animal = find_fundamental_tone(y_animal, sr_animal)

print(f'Fundamental tone "A": {fundamental_a} Hz')
print(f'Fundamental tone "I": {fundamental_i} Hz')
print(f'Fundamental tone "Miau": {fundamental_animal:.2f} Hz')

# Поиск трех самых сильных формант
def find_formants(y, sr, n_formants=3):
    D = np.abs(librosa.stft(y))
    S = np.mean(D, axis=1)
    peaks, _ = find_peaks(S, distance=sr//50)

    # Проверка на наличие достаточного количества пиков
    if len(peaks) < n_formants:
        print(f'Found only {len(peaks)} peaks, increasing sensitivity.')
        peaks, _ = find_peaks(S, distance=sr//100)

    sorted_peaks = sorted(peaks, key=lambda x: S[x], reverse=True)
    formants = sorted_peaks[:n_formants]
    formant_freqs = librosa.fft_frequencies(sr=sr)[formants]
    return formant_freqs

formants_a = find_formants(y_a, sr_a)
formants_i = find_formants(y_i, sr_i)
formants_animal = find_formants(y_animal, sr_animal)

print(f'Formants "A": {formants_a} Hz')
print(f'Formants "I": {formants_i} Hz')
print(f'Formants "Miau": {formants_animal} Hz')