# -*- coding: utf-8 -*-
"""Лаба5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rQO1y3DbOHJnuQfmXE9ix2hcoEgHnS0r
"""

import os
import csv
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw, ImageFont
from google.colab import files

# Создадим директорию для сохранения изображений и данных
output_directory = "turkish_alphabet_images"
os.makedirs(output_directory, exist_ok=True)

# Заглавные буквы турецкого алфавита
turkish_alphabet = "A B C Ç D E F G Ğ H I İ J K L M N O Ö P R S Ş T U Ü V Y Z".split()

from google.colab import files

# Загрузка файла шрифта в Google Colab
uploaded_font = files.upload()

# Получите путь к файлу шрифта
font_path = next(iter(uploaded_font))



# Установите размер шрифта
font_size = 100

# Загрузите шрифт
font = ImageFont.truetype(font_path, font_size)

# Создаем списки для хранения данных
features_data = []
header = ["Character", "Top Left Mass", "Top Right Mass", "Bottom Left Mass", "Bottom Right Mass",
          "Normalized Top Left Mass", "Normalized Top Right Mass", "Normalized Bottom Left Mass",
          "Normalized Bottom Right Mass", "Center of Gravity X", "Center of Gravity Y",
          "Normalized COG X", "Normalized COG Y", "Horizontal Moment of Inertia",
          "Vertical Moment of Inertia", "Normalized Horizontal Moment of Inertia",
          "Normalized Vertical Moment of Inertia"]

# Обрабатываем каждый символ в турецком алфавите
for char in turkish_alphabet:
    # Создаем изображение символа
    image_size = (200, 200)  # Укажите размер изображения
    image = Image.new("L", image_size, color=255)  # Создаем изображение с белым фоном
    draw = ImageDraw.Draw(image)

    # Узнаем размеры текста
    text_width, text_height = draw.textsize(char, font=font)

    # Рисуем текст в центре изображения
    draw.text(((image_size[0] - text_width) / 2, (image_size[1] - text_height) / 2), char, fill=0, font=font)

    # Обрезаем изображение, чтобы удалить белые поля
    bbox = image.getbbox()
    if bbox:
        cropped_image = image.crop(bbox)
        image_filename = os.path.join(output_directory, f"{char}.png")
        cropped_image.save(image_filename)

        # Преобразуем изображение в массив numpy для анализа
        np_image = np.array(cropped_image)

        # Вычисляем признаки для каждой четверти изображения
        height, width = np_image.shape
        quarter_width = width // 2
        quarter_height = height // 2

        # Верхняя левая четверть
        top_left = np_image[:quarter_height, :quarter_width]
        top_left_mass = np.sum(top_left == 0)

        # Верхняя правая четверть
        top_right = np_image[:quarter_height, quarter_width:]
        top_right_mass = np.sum(top_right == 0)

        # Нижняя левая четверть
        bottom_left = np_image[quarter_height:, :quarter_width]
        bottom_left_mass = np.sum(bottom_left == 0)

        # Нижняя правая четверть
        bottom_right = np_image[quarter_height:, quarter_width:]
        bottom_right_mass = np.sum(bottom_right == 0)

        # Общая площадь каждой четверти
        quarter_area = quarter_width * quarter_height

        # Удельные веса (нормированные к площади четверти)
        norm_top_left_mass = top_left_mass / quarter_area
        norm_top_right_mass = top_right_mass / quarter_area
        norm_bottom_left_mass = bottom_left_mass / quarter_area
        norm_bottom_right_mass = bottom_right_mass / quarter_area

        # Вычисляем координаты центра тяжести
        y_indices, x_indices = np.where(np_image == 0)
        cog_x = np.mean(x_indices)
        cog_y = np.mean(y_indices)

        # Нормированные координаты центра тяжести
        norm_cog_x = cog_x / width
        norm_cog_y = cog_y / height

        # Вычисляем осевые моменты инерции по горизонтали и вертикали
        h_moment_inertia = np.sum((y_indices - cog_y) ** 2)
        v_moment_inertia = np.sum((x_indices - cog_x) ** 2)

        # Нормированные осевые моменты инерции
        norm_h_moment_inertia = h_moment_inertia / np.sum(np_image == 0)
        norm_v_moment_inertia = v_moment_inertia / np.sum(np_image == 0)

        # Сохраняем признаки в список
        features_data.append([
            char,
            top_left_mass,
            top_right_mass,
            bottom_left_mass,
            bottom_right_mass,
            norm_top_left_mass,
            norm_top_right_mass,
            norm_bottom_left_mass,
            norm_bottom_right_mass,
            cog_x,
            cog_y,
            norm_cog_x,
            norm_cog_y,
            h_moment_inertia,
            v_moment_inertia,
            norm_h_moment_inertia,
            norm_v_moment_inertia
        ])

        # Создаем профили X и Y
        profile_x = np.sum(np_image == 0, axis=0)  # Профиль по оси X (столбцы)
        profile_y = np.sum(np_image == 0, axis=1)  # Профиль по оси Y (ряды)

        # Сохраняем профили X и Y в виде столбчатых диаграмм
        # Профиль X
        plt.figure()
        plt.bar(range(len(profile_x)), profile_x)
        plt.xlabel('Column')
        plt.ylabel('Black Pixel Count')
        plt.title(f'Profile X for Character {char}')
        plt.savefig(os.path.join(output_directory, f"{char}_profile_x.png"))
        plt.close()

        # Профиль Y
        plt.figure()
        plt.bar(range(len(profile_y)), profile_y)
        plt.xlabel('Row')
        plt.ylabel('Black Pixel Count')
        plt.title(f'Profile Y for Character {char}')
        plt.savefig(os.path.join(output_directory, f"{char}_profile_y.png"))
        plt.close()

# Сохранение скалярных признаков в формат CSV
csv_filename = os.path.join(output_directory, "features.csv")
with open(csv_filename, mode='w', newline='') as csv_file:
    writer = csv.writer(csv_file, delimiter=';')
    writer.writerow(header)
    writer.writerows(features_data)

print(f"Изображения символов, профили и CSV-файл сохранены в директории: {output_directory}")

# Загрузите CSV-файл с характеристиками
files.download(csv_filename)

import shutil

folder_path = '/content/turkish_alphabet_images'  # Укажите путь к папке, которую хотите скачать
archive_path = 'turkish_alphabet_images.zip'  # Название архивного файла

shutil.make_archive(archive_path.replace('.zip', ''), 'zip', folder_path)

from google.colab import files

files.download(archive_path)