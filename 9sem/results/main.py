# -*- coding: utf-8 -*-
"""лаба9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t9hcx4YTzLUW7-_kmOxKOzL2Cxt1eVKw
"""

from scipy.io import wavfile
from scipy import signal
import matplotlib.pyplot as plt
import numpy as np

def spectrogram_plot(samples, sample_rate,t = 10000):
    frequencies, times, my_spectrogram = signal.spectrogram(samples, sample_rate, scaling='spectrum', window='hann')
    spec = np.log10(my_spectrogram)
    plt.pcolormesh(times, frequencies, spec, shading='gouraud', vmin=spec.min(), vmax=spec.max())

    plt.ylim(top=t)
    plt.ylabel('Frequency [Hz]')
    plt.xlabel('Time [s]')

def denoise(samples, sample_rate, cutoff_frequency, passes=1):
    z = signal.savgol_filter(samples, 100, 3)

    b, a = signal.butter(3, cutoff_frequency / sample_rate)

    zi = signal.lfilter_zi(b, a)
    for _ in range(passes):
        z, _ = signal.lfilter(b, a, z, zi=zi * z[0])
    return z

def to_pcm(y):
    return np.int16(y / np.max(np.abs(y)) * 32000)

def find_energy_maxima(samples, sample_rate, window_size=0.1, frequency_range=(40, 50)):
    # Определяем количество отсчетов в окне
    window_length = int(window_size * sample_rate)
    # Создаем список для хранения моментов времени с наибольшей энергией
    max_energy_times = []

    # Вычисляем спектрограмму для всего аудиосигнала
    frequencies, times, spectrogram = signal.spectrogram(samples, sample_rate, window='hann')

    # Определяем индексы частот в заданном диапазоне
    start_index = np.where(frequencies >= frequency_range[0])[0][0]
    end_index = np.where(frequencies <= frequency_range[1])[0][-1]

    # Выбираем часть спектрограммы, соответствующую заданному частотному диапазону
    spectrogram_subset = spectrogram[start_index:end_index+1, :]

    # Проходим по временным отсчетам спектрограммы
    for i in range(len(times)):
        # Вычисляем сумму амплитуд в заданном частотном диапазоне в пределах окна
        energy = np.sum(spectrogram_subset[:, i:i+window_length])
        # Добавляем момент времени с наибольшей энергией в список
        max_energy_times.append((times[i], energy))

    return max_energy_times

if __name__ == '__main__':
    dpi = 500


    from google.colab import files
    uploaded = files.upload()


    for fn in uploaded.keys():
        sample_rate, samples = wavfile.read(fn)

    plt.figure(dpi=dpi)

    spectrogram_plot(samples, sample_rate, 20000)
    plt.savefig('spectrogram.png', dpi=dpi)
    plt.clf()

    denoised_0 = denoise(samples, sample_rate, cutoff_frequency=3000, passes=0)
    spectrogram_plot(denoised_0, sample_rate, 20000)
    plt.savefig('denoised_spectrogram_savgol.png', dpi=dpi)
    plt.clf()

    denoised = denoise(samples, sample_rate, cutoff_frequency=3000)
    spectrogram_plot(denoised, sample_rate)
    plt.savefig('denoised_spectrogram_once.png', dpi=dpi)
    plt.clf()

    wavfile.write('denoised_once.wav', sample_rate, to_pcm(denoised))
    denoised_2 = denoise(samples, sample_rate, cutoff_frequency=3000, passes=2)
    spectrogram_plot(denoised_2, sample_rate)
    plt.savefig('denoised_spectrogram_twice.png', dpi=dpi)
    plt.clf()

    max_energy_times = find_energy_maxima(samples, sample_rate)


    plt.figure(figsize=(10, 6))
    spectrogram_plot(samples, sample_rate)
    for time, _ in max_energy_times:
        plt.axvline(x=time, color='r', linestyle='--')
    plt.title("Spectrogram with Moments of Highest Energy")
    plt.savefig('spectrogram_with_energy_maxima.png', dpi=dpi)
    plt.clf()

    wavfile.write('denoised_twice.wav', sample_rate, to_pcm(denoised))