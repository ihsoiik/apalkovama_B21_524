# -*- coding: utf-8 -*-
"""лаба1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OGPgHRiOgmBns5Te1D0rddGbnlT1rlKO
"""

from PIL import Image
import numpy as np

img_src = Image.open('/content/lisa.png').convert('RGB')
img_src_arr = np.array(img_src)
img_src

print("height:" + str(img_src_arr.shape[0]))
print("width:" + str(img_src_arr.shape[1]))

"""Растяжение в M раз"""

def upsampling(img_src_arr, m):
  height = img_src_arr.shape[0]
  width = img_src_arr.shape[1]
  new_height = height * m
  new_width = width * m
  new_image_arr = np.zeros(shape = (new_height, new_width, img_src_arr.shape[2]))

  for x in range(new_height):
    for y in range(new_width):
      new_image_arr[x, y] = img_src_arr[x // m, y // m]

  return  new_image_arr

src_image_arr = upsampling(img_src_arr, 10)

Image.fromarray(src_image_arr.astype(np.uint8), 'RGB')

print("height:" + str(src_image_arr.shape[0]))
print("width:" + str(src_image_arr.shape[1]))

"""Сжатие изображения в N раз"""

def downsampling(img_src_arr, n):
  height = img_src_arr.shape[0]
  new_height = int(height / n)
  width = img_src_arr.shape[1]
  new_width = int(width / n)
  new_image_arr = np.zeros(shape = (new_height, new_width, img_src_arr.shape[2]))

  for x in range(new_height):
    for y in range(new_width):
      new_image_arr[x, y] = img_src_arr[x * n, y * n]

  return  new_image_arr

src_image_arr = downsampling(img_src_arr, 3)

Image.fromarray(src_image_arr.astype(np.uint8), 'RGB')

print("height:" + str(src_image_arr.shape[0]))
print("width:" + str(src_image_arr.shape[1]))

"""Передискретизация в два прохода"""

def resampling_twostep(img_src_arr, m, n):
  return downsampling(upsampling(img_src_arr, m), n)

src_image = resampling_twostep(img_src_arr, 10, 3)

Image.fromarray(src_image.astype(np.uint8), 'RGB')

print("height:" + str(src_image.shape[0]))
print("width:" + str(src_image.shape[1]))

"""Передискретизация за один подход"""

def resampling(img_src_arr, m, n):
  height = img_src_arr.shape[0]
  new_height = int(height * (m / n))
  width = img_src_arr.shape[1]
  new_width = int(width * (m / n))
  new_image = np.zeros(shape = (new_height, new_width, img_src_arr.shape[2]))
  for x in range(new_height):
    for y in range(new_width):
      src_x = int(x * (height / new_height))
      src_y = int(y * (width / new_width))
      new_image[x, y] = img_src_arr[src_x, src_y]

  return  new_image

src_image = resampling(img_src_arr, 10, 3)

Image.fromarray(src_image.astype(np.uint8), 'RGB')

print("height:" + str(src_image.shape[0]))
print("width:" + str(src_image.shape[1]))

if __name__ == '__main__':
    with Image.open(f'lisa.png').convert('RGB') as img:
        print(f'Opened image ')
        display(img)
        tmp1 = upsampling(img_src_arr, 10)
        Image.fromarray(tmp1.astype(np.uint8), 'RGB')

        tmp2 = downsampling(img_src_arr, 3)
        Image.fromarray(tmp2.astype(np.uint8), 'RGB')

        tmp3 = resampling_twostep(img_src_arr, 10, 3)
        Image.fromarray(tmp3.astype(np.uint8), 'RGB')

        tmp4 = resampling(img_src_arr, 10, 3)
        Image.fromarray(tmp4.astype(np.uint8), 'RGB')