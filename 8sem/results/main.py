# -*- coding: utf-8 -*-
"""лаба8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ahOcRhbixV8VHUhCMUWUIkOP8ByfV43
"""

!pip install opencv-python-headless

import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.feature import greycomatrix, greycoprops

# Загрузка изображения
def load_image(image_path):
    return cv2.imread(image_path, cv2.IMREAD_COLOR)

# Визуализация изображения
def show_image(image, title="Image"):
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis("off")
    plt.show()

# Метод преобразования яркости
def brightness_transform(image, gamma=1.0):
    inv_gamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** inv_gamma) * 255 for i in np.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, table)

# Рассчет матрицы Харалика и признаков
def calculate_haralick_features(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    haralick_matrix = greycomatrix(gray, distances=[1], angles=[0, np.pi/2, np.pi, 3*np.pi/2], levels=256, symmetric=True, normed=True)
    features = ['ASM', 'contrast', 'correlation', 'homogeneity']
    feature_values = [greycoprops(haralick_matrix, feature).ravel()[0] for feature in features]
    return feature_values

# Визуализация матрицы в 256 градациях серого
def visualize_gray_matrix(matrix):
    plt.imshow(matrix, cmap='gray')
    plt.axis("off")
    plt.show()

# Загрузка изображения
image_path = "lisa.png"
image = load_image(image_path)

# Визуализация исходного изображения
show_image(image, "Original Image")

# Преобразование яркости
gamma = 1.5  # Параметр для степенного преобразования
brightened_image = brightness_transform(image, gamma=gamma)

# Визуализация контрастированного изображения
show_image(brightened_image, "Brightened Image")

# Рассчет и визуализация матрицы Харалика и признаков для исходного и контрастированного изображений
haralick_features_original = calculate_haralick_features(image)
haralick_features_brightened = calculate_haralick_features(brightened_image)

print("Haralick Features for Original Image:", haralick_features_original)
print("Haralick Features for Brightened Image:", haralick_features_brightened)

# Визуализация матрицы Харалика для исходного изображения
haralick_matrix_original = greycomatrix(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY), distances=[1], angles=[0, np.pi/2, np.pi, 3*np.pi/2], levels=256, symmetric=True, normed=True)
visualize_gray_matrix(haralick_matrix_original[:, :, 0, 0])

# Визуализация матрицы Харалика для контрастированного изображения
haralick_matrix_brightened = greycomatrix(cv2.cvtColor(brightened_image, cv2.COLOR_BGR2GRAY), distances=[1], angles=[0, np.pi/2, np.pi, 3*np.pi/2], levels=256, symmetric=True, normed=True)
visualize_gray_matrix(haralick_matrix_brightened[:, :, 0, 0])

# Визуализация гистограммы изображения
def plot_histogram(image):
    plt.hist(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY).ravel(), bins=256, color='gray', alpha=0.5)
    plt.xlabel('Intensity')
    plt.ylabel('Frequency')
    plt.title('Histogram')
    plt.show()

# Визуализация матрицы Харалика
def plot_haralick_matrix(haralick_matrix):
    fig, axes = plt.subplots(1, 4, figsize=(15, 3))
    titles = ['ASM', 'contrast', 'correlation', 'homogeneity']
    for i, ax in enumerate(axes.flatten()):
        ax.imshow(haralick_matrix[:, :, i, 0], cmap='gray')
        ax.set_title(titles[i])
        ax.axis('off')
    plt.show()

# Визуализация всех требуемых данных для изображения
def visualize_all(image, brightened_image, haralick_matrix_original, haralick_matrix_brightened):
    print("Original Image:")
    show_image(image)
    print("Grayscale Image:")
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    visualize_gray_matrix(gray_image)
    print("Brightened Image:")
    show_image(brightened_image)
    print("Histogram for Original Image:")
    plot_histogram(image)
    print("Histogram for Brightened Image:")
    plot_histogram(brightened_image)
    print("Haralick Matrix for Original Image:")
    plot_haralick_matrix(haralick_matrix_original)
    print("Haralick Matrix for Brightened Image:")
    plot_haralick_matrix(haralick_matrix_brightened)

# Преобразование яркости
gamma = 1.5  # Параметр для степенного преобразования
brightened_image = brightness_transform(image, gamma=gamma)

# Рассчет матрицы Харалика для исходного и контрастированного изображений
haralick_matrix_original = greycomatrix(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY), distances=[1], angles=[0, np.pi/2, np.pi, 3*np.pi/2], levels=256, symmetric=True, normed=True)
haralick_matrix_brightened = greycomatrix(cv2.cvtColor(brightened_image, cv2.COLOR_BGR2GRAY), distances=[1], angles=[0, np.pi/2, np.pi, 3*np.pi/2], levels=256, symmetric=True, normed=True)

# Визуализация всех данных
visualize_all(image, brightened_image, haralick_matrix_original, haralick_matrix_brightened)